#!/bin/sh

set -e -u -o pipefail

# Based on the Linux driver for the mEMAC MDIO controller
# drivers/net/ethernet/freescale/xgmac_mdio.c

fman_base_addr="0x1a00000"
emi1_offset="0xfc000"
emi2_offset="0xfd000"
mdio_cfg_offset="0x30"
mdio_ctl_offset="0x34"
mdio_data_offset="0x38"
mdio_addr_offset="0x3C" # Clause 45 only

compute_reg_addresses() {
	local mdio_bus="$1"
	case ${mdio_bus} in
	emi1)
		mdio_cfg="$((${fman_base_addr} + ${emi1_offset} + ${mdio_cfg_offset}))"
		mdio_ctl="$((${fman_base_addr} + ${emi1_offset} + ${mdio_ctl_offset}))"
		mdio_data="$((${fman_base_addr} + ${emi1_offset} + ${mdio_data_offset}))"
		mdio_addr="$((${fman_base_addr} + ${emi1_offset} + ${mdio_addr_offset}))"
		;;
	emi2)
		mdio_cfg="$((${fman_base_addr} + ${emi2_offset} + ${mdio_cfg_offset}))"
		mdio_ctl="$((${fman_base_addr} + ${emi2_offset} + ${mdio_ctl_offset}))"
		mdio_data="$((${fman_base_addr} + ${emi2_offset} + ${mdio_data_offset}))"
		mdio_addr="$((${fman_base_addr} + ${emi2_offset} + ${mdio_addr_offset}))"
		;;
	*)
		usage
		;;
	esac
}

# Core is little endian, MDIO controller is big endian
bswap32() {
	local value="$1"
	printf "0x%04x\n" "$((((${value} & 0xff000000) >> 24) | ((${value} & 0x00ff0000) >> 8) | ((${value} & 0x0000ff00) << 8) | ((${value} & 0x000000ff) << 24)))"
}

memac_read32() {
	local addr="$1"
	printf "0x%04x\n" $(bswap32 $(devmem ${addr}))
}

memac_write32() {
	local addr="$1"
	local value="$2"
	devmem ${addr} 32 $(bswap32 ${value})
}

memac_wait_until_free() {
	local bsy=
	while :; do
		bsy=$(($(memac_read32 ${mdio_cfg}) >> 31))
		if [ ${bsy} = 0 ]; then
			break
		fi
		sleep 1
	done
}

memac_set_clause() {
	local clause="$1"
	# Set or unset bit 6 (ENC45 - Enable Clause 45) of MDIO_CFG
	local tmp=$(memac_read32 ${mdio_cfg})
	case ${clause} in
	c22)
		tmp=$((${tmp} & (~(1 << 6))))
		;;
	c45)
		tmp=$((${tmp} | (1 << 6)))
		;;
	*)
		usage
		;;
	esac
	# Extend MDIO hold time (bits 2-4) to maximum possible value
	# (7 => 57 FMan clock cycles)
	# Also requires asserting bit EHOLD (22)
	# Other possible MDIO_HOLD values:
	# 0 << 2 =>  1 FMan clock cycle
	# 1 << 2 =>  9 FMan clock cycles
	# 2 << 2 => 17 FMan clock cycles (default reset value)
	# 3 << 2 => 25 FMan clock cycles
	# 4 << 2 => 33 FMan clock cycles
	# 5 << 2 => 41 FMan clock cycles
	# 6 << 2 => 49 FMan clock cycles
	tmp=$((${tmp} | (7 << 2) | (1 << 22)))
	memac_write32 ${mdio_cfg} ${tmp}
	memac_wait_until_free
}

# LS1043DPAARM 6.5.4.3 Clause 22 Read Flow
memac_c22_mdio_read() {
	[ $# -eq 2 ] || usage
	local phy_addr="$1"
	local reg_addr="$2"

	phy_addr=$((${phy_addr} & 0x1f))
	reg_addr=$((${reg_addr} & 0x1f))
	# Bit 15 is READ
	memac_write32 ${mdio_ctl} "$(((1 << 15) | (${phy_addr} << 5) | ${reg_addr}))"
	memac_wait_until_free
	mdio_rd_er=$((($(memac_read32 ${mdio_cfg}) & 0x00000002) >> 1))
	if [ ${mdio_rd_er} = 1 ]; then
		echo 0xffff
		return 1
	fi
	printf "0x%04x\n" $(($(memac_read32 ${mdio_data}) & 0xffff))
}

# LS1043DPAARM 6.5.4.4 Clause 22 Write Flow
memac_c22_mdio_write() {
	[ $# -eq 3 ] || usage
	local phy_addr="$1"
	local reg_addr="$2"
	local value="$3"

	phy_addr=$((${phy_addr} & 0x1f))
	reg_addr=$((${reg_addr} & 0x1f))
	value=$((${value} & 0xffff))
	memac_write32 ${mdio_ctl} "$(((${phy_addr} << 5) | ${reg_addr}))"
	memac_write32 ${mdio_data} ${value}
	memac_wait_until_free
}

memac_c45_mdio_read() {
	[ $# -eq 3 ] || usage
	local port_addr="$1"
	local dev_addr="$2"
	local reg_addr="$3"

	port_addr=$((${port_addr} & 0x1f))
	dev_addr=$((${dev_addr} & 0x1f))
	reg_addr=$((${reg_addr} & 0xffff))
	memac_write32 ${mdio_addr} "${reg_addr}"
	# Bit 15 is READ
	memac_write32 ${mdio_ctl} "$(((1 << 15) | (${port_addr} << 5) | ${dev_addr}))"
	memac_wait_until_free
	mdio_rd_er=$((($(memac_read32 ${mdio_cfg}) & 0x00000002) >> 1))
	if [ ${mdio_rd_er} = 1 ]; then
		echo 0xffff
		return 1
	fi
	printf "0x%04x\n" $(($(memac_read32 ${mdio_data}) & 0xffff))
}

memac_c45_mdio_write() {
	[ $# -eq 4 ] || usage
	local port_addr="$1"
	local dev_addr="$2"
	local reg_addr="$3"
	local value="$4"

	port_addr=$((${port_addr} & 0x1f))
	dev_addr=$((${reg_addr} & 0x1f))
	reg_addr=$((${reg_addr} & 0xffff))
	value=$((${value} & 0xffff))
	memac_write32 ${mdio_ctl} "$(((${port_addr} << 5) | ${dev_addr}))"
	memac_write32 ${mdio_addr} "${reg_addr}"
	memac_wait_until_free
	memac_write32 ${mdio_data} ${value}
	memac_wait_until_free
}

usage() {
	echo "Usage:"
	echo " * $0 emi1|emi2 c22 read  <phy_addr>  <reg_addr>"
	echo " * $0 emi1|emi2 c22 write <phy_addr>  <reg_addr> <reg_value>"
	echo " * $0 emi1|emi2 c45 read  <port_addr> <dev_addr> <reg_addr>"
	echo " * $0 emi1|emi2 c45 write <port_addr> <dev_addr> <reg_addr> <reg_value>"
	exit 1
}

# Need at least bus, clause and operation (read/write) to even proceed further
[ $# -lt 3 ] && usage
bus=$1; shift
clause=$1; shift
cmd=$1; shift

compute_reg_addresses ${bus}
memac_set_clause ${clause}

case "${cmd}" in
read)
	memac_${clause}_mdio_read $@
	;;
write)
	memac_${clause}_mdio_write $@
	;;
*)
	usage
	;;
esac

